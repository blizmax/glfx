/*
Flex and Bison files have three sections:

the first is sort of "control" information,
the second is the actual token/grammar definitions,
the last is C code to be copied verbatim to the output.
*/
%option yylineno
%option noyywrap
%option stack
%option fast
%option ecs
%option prefix="glfx"
%option outfile="src/generated/glfxScanner.cpp" header-file="src/generated/glfxScanner.h"

%{
	#define YYDEBUG 1
    #ifdef _MSC_VER
		// MS's C++ compiler is more strict than gcc
		// No unistd.h
		#define YY_NO_UNISTD_H
		// Direct IO functions (read and such)
		#include <io.h>
		// Disable the warning for yywrap
		#pragma warning( disable: 4003 )
		// Disable the warning about deprecated naming of _read and friends
		#pragma warning( disable: 4996 )
    #endif

    #ifdef _M_X64
		// flex is (still) incompatible with x64
		// it makes some casts from pointers to integers (pointer casts seem to be fixed in the latest version) and from size_t to integers
		// it should work though, nothing too serious
		#pragma warning( disable:4267 )
		#pragma warning( disable:4244 )
    #endif

    #include <iostream>
    #include <string>
    #include <sstream>
	#include <stdarg.h>
	
	#include <stdint.h>

    #include "glfxParser.h"
    #include "glfxClasses.h"
    #include "glfxEffect.h"

    // tokens from parser generator
    #include "glfxLALRParser.hpp"
    #include "StringFunctions.h"

    static void errLex(const char* tok);

    using namespace std;
    using namespace glfxParser;
	static int brace=0;
	#pragma optimize("",off)
	void glfxWrite(const char *txt)
	{
		sharedCode<<txt;
	}
	int glfxprintf ( FILE * , const char * format_str, ... )
	{
		int size=strlen(format_str)+100;
		std::string str;
		va_list ap;
		int n=-1;
		while(n<0||n>=size)
		{ 
			str.resize(size);
			va_start(ap, format_str);
			//n = vsnprintf_s((char *)str.c_str(), size, size,format_str, ap);
			n = vsnprintf((char *)str.c_str(), size,format_str, ap);
			va_end(ap);
			if(n> -1 && n < size)
			{
				str.resize(n);
				break;
			}
			if (n > -1)
				size=n+1;
			else
				size*=2;
		}
		std::cout<<str.c_str();
		return strlen(str.c_str());
	}
	std::string recent;
	std::string accw;
	extern void gSkip();
	extern bool write_line_number_next;
	extern int LineNumberFromYYLine(int yylineno);
	extern int CurrentFilenumber();
	void accumulateWhitespace(const char *w)
	{
		accw+=w;
	}
	int modReturn_(int u, const char *txt);
	int stdReturn_(int u);
#define stdReturn return stdReturn_
#define modReturn return modReturn_
%}

%x IN_SHADER IN_FUNCTION IN_DEFINE IN_UNDEFINE IN_SHADER_COMPILE IN_RENDER_STATE IN_STRUCT IN_TEXTURE_DECL IN_UNIFORM_DECL IN_PRAGMA IN_MULTILINE_COMMENT IN_LINE

ID_BLCK [a-zA-Z_][a-zA-Z0-9_]*
NUM_BLCK 0|([1-9][0-9]*)
HEX_BLCK 0x[0-9A-Fa-f][0-9A-Fa-f]*
STR_BLCK \"[^"\n]*\"
FLOAT_BLCK [0-9]*((\.[0-9])|([0-9]\.))[0-9]*((e|E)-?[0-9][0-9]*)?f?

/* The %% means that we are done with the CONTROL section, and now move onto the token definitions
<INITIAL>"patch"|"centroid"						if(gLexPassthrough) glfxWrite(yytext); else {glfxlval.strs[0]=yytext; stdReturn(STORAGET);}*/
/*The HLSL compiler recognizes the following pragmas:
def
message
pack_matrix
warning
				once		Display the message of the warnings with the specified numbers only once.
				default		Reset the behavior of the warnings with the specified numbers to their default value.
							This also has the effect of turning a warning on that is off by default. The warning will be generated at its default level.
				1, 2, 3, 4	Apply the specified level to the warnings with the specified numbers.
							This also has the effect of turning a warning on that is off by default.
				disable		Do not issue the warnings with the specified numbers.
				error		Report the warnings with the specified numbers as errors.
*/
%%
<INITIAL>"#"pragma							{
												if(gLexPassthrough)
													glfxWrite(yytext); 
												glfxPushState(IN_PRAGMA);
												stdReturn(PRAGMA);
											}
<IN_PRAGMA>"warning"						{
												stdReturn(WARNING);
											}
<IN_PRAGMA>"def"							{
												stdReturn(DEF);
											}
<IN_PRAGMA>"message"						{
												stdReturn(MESSAGE);
											}
<IN_PRAGMA>"pack_matrix"					{
												stdReturn(PACK_MATRIX);
											}
<INITIAL>"#"define							{
												if(gLexPassthrough)
													glfxWrite(yytext); 
												glfxPushState(IN_DEFINE);
												stdReturn(DEFINE);
											}
<INITIAL>"#"undef							{
												glfxlval.lineno=yylineno;
												glfxlval.strs[0]=yytext;
												glfxPushState(IN_UNDEFINE);
												stdReturn(UNDEF);
											}
<INITIAL>"maxvertexcount"					{
												stdReturn(SA_MAXVERTEXCOUNT);
											}
<INITIAL>"numthreads"						{
												stdReturn(SA_NUMTHREADS);
											}
<INITIAL>"["									{stdReturn('[');}
<INITIAL>"]"									{stdReturn(']');}
<IN_DEFINE>[^\n]+									{
														if(gLexPassthrough)
															glfxWrite(yytext); 
														stdReturn(MACRO_DEFINITION);
													}
<IN_DEFINE,IN_UNDEFINE,IN_PRAGMA,IN_LINE>\n			{
														if(gLexPassthrough)
															glfxWrite(yytext); 
														glfxPopState();
														stdReturn(EOL);
													}
<INITIAL>"uniform"									{
														glfxPushState(IN_UNIFORM_DECL);
														stdReturn(UNIFORM);
													}
<INITIAL,IN_UNIFORM_DECL>"sampler1D"|"Texture1D"	{
														modReturn(TEXTURE3D,"sampler1D");
													}
<INITIAL,IN_UNIFORM_DECL>"sampler3D"|"Texture3D"	{
														modReturn(TEXTURE3D,"sampler3D");
													}
<INITIAL,IN_UNIFORM_DECL>"sampler2D"|"Texture2D"	{
														modReturn(TEXTURE2D, "sampler2D");
													}
<INITIAL,IN_UNIFORM_DECL>"usampler2D"				{
														stdReturn(TEXTURE2D);
													}
<INITIAL,IN_UNIFORM_DECL>"usampler3D"				{
														stdReturn(TEXTURE3D);
													}
<INITIAL,IN_UNIFORM_DECL>"TextureCUBE"|"TextureCube"|"samplerCube"			{
														modReturn(TEXTURECUBE,"samplerCube");
													}
<INITIAL,IN_UNIFORM_DECL>"Texture2DMS"|"sampler2DMS"	{
														modReturn(TEXTURE2DMS,"sampler2DMS");
													}
<INITIAL,IN_UNIFORM_DECL>"RWTexture3D"|"image3D"	{
														modReturn(RW_TEXTURE3D,"RWTexture3D");
													}
<INITIAL,IN_UNIFORM_DECL>"RWTexture2D"|"image2D"	{
														stdReturn(RW_TEXTURE2D);
													}  
<INITIAL,IN_UNIFORM_DECL>"RWTexture2DArray"			{
														stdReturn(RW_TEXTURE2DARRAY);
													}  
<INITIAL,IN_UNIFORM_DECL>"Texture2DArray"			{
														stdReturn(TEXTURE2DARRAY);
													}  
<INITIAL,IN_UNIFORM_DECL>"StructuredBuffer"			{
														stdReturn(STRUCTUREDBUFFER);
													}
<INITIAL,IN_UNIFORM_DECL>"RWStructuredBuffer"		{
														stdReturn(RW_STRUCTUREDBUFFER);
													}
<IN_UNIFORM_DECL>"<"								{
														stdReturn('<');
													}
<IN_UNIFORM_DECL>">"								{
														stdReturn('>');
													}
<INITIAL,IN_UNIFORM_DECL,IN_RENDER_STATE>"register"						{
													stdReturn(REGISTER);
												}
<IN_UNIFORM_DECL,IN_UNDEFINE,IN_PRAGMA>{ID_BLCK}	{
														glfxlval.lineno=yylineno;
														glfxlval.strs[0]=yytext;
														stdReturn(IDENTIFIER);
													}
<IN_UNIFORM_DECL>";"								{
														glfxPopState();
														stdReturn(';');
													}
<INITIAL>"layout"									{
														/*layout(local_size_x=u,local_size_y=v,local_size_z=w) in;*/
														glfxlval.lineno=yylineno;
														glfxlval.strs[0]=yytext;
														glfxPushState(IN_SHADER_COMPILE);
														stdReturn(LAYOUT);
													}
<INITIAL>"struct"									{
														glfxPushState(IN_STRUCT);
														stdReturn(STRUCT);
													}
<INITIAL,IN_SHADER,IN_STRUCT>"SV_DispatchThreadID"		glfxlval.strs[0]=yytext;	stdReturn(SV_DISPATCHTHREADID);
<INITIAL,IN_SHADER,IN_STRUCT>"gl_GlobalInvocationID"	glfxlval.strs[0]=yytext;	stdReturn(SV_DISPATCHTHREADID);
<INITIAL,IN_SHADER,IN_STRUCT>"SV_GroupID"				glfxlval.strs[0]=yytext;	stdReturn(SV_GROUPID);
<INITIAL,IN_SHADER,IN_STRUCT>"SV_GroupThreadID"			glfxlval.strs[0]=yytext;	stdReturn(SV_GROUPTHREADID);
<INITIAL,IN_SHADER,IN_STRUCT>"SV_VertexID"				glfxlval.strs[0]=yytext;	modReturn(SV_VERTEXID,"gl_VertexID");
<INITIAL,IN_SHADER,IN_STRUCT>"gl_VertexID"				glfxlval.strs[0]=yytext;	stdReturn(SV_VERTEXID);
<INITIAL>"program"								glfxlval.boolean=false;		stdReturn(PROGRAM);
<INITIAL>"stages"								glfxlval.boolean=true;		stdReturn(PROGRAM);
<INITIAL>"technique"							glfxlval.boolean=false;		stdReturn(TECHNIQUE);
<INITIAL>"pass"									glfxlval.boolean=false;		stdReturn(PASS);
<INITIAL>"group"								glfxlval.boolean=false;		stdReturn(GROUP);
<INITIAL>"fxgroup"								glfxlval.boolean=false;		stdReturn(GROUP);
<INITIAL>"shader"								{
													glfxlval.lineno=yylineno;
													glfxlval.strs[0]=yytext;
													stdReturn(SHADER);
												}
<INITIAL>"constant_buffer"						{
													glfxlval.lineno=yylineno;
													glfxlval.strs[0]=yytext;
													stdReturn(CONSTANT_BUFFER);
												}
<INITIAL>"cbuffer"								{
													stdReturn(CONSTANT_BUFFER);
												}
<INITIAL>"interface"							glfxlval.lineno=yylineno;	glfxlval.strs[0]=yytext;	stdReturn(INTERFACE);
<INITIAL>"sampler"								glfxlval.lineno=yylineno;	glfxlval.strs[0]=yytext;	stdReturn(SAMPLER);
<INITIAL>"profile"								{
													glfxPushState(IN_SHADER_COMPILE);
													stdReturn(PROFILE);
												}

<INITIAL>"RW_TEXTURE3D_FLOAT4"					{
													glfxPushState(IN_TEXTURE_DECL);
													stdReturn(RW_TEXTURE3D_FLOAT4);
												}
<IN_TEXTURE_DECL>","							{
													glfxlval.strs[0]=yytext;
													glfxPopState();
													stdReturn(',');
												}
<INITIAL,IN_SHADER_COMPILE,IN_RENDER_STATE,IN_SHADER>"#line"	{
														glfxlval.lineno=yylineno;
														glfxlval.strs[0]=yytext;
														glfxPushState(IN_LINE);
														stdReturn(LINE);
													}
<INITIAL>^"#include"[\t ]+{STR_BLCK}[\t ]*\n	{
													string tmp(yytext);
													size_t firstLoc=tmp.find('"')+1;
													size_t secondLoc=tmp.find('"', firstLoc);
													glfxlval.strs[0]=tmp.substr(firstLoc, secondLoc-firstLoc);
													glfxlval.lineno=yylineno-1; // flex has already jumped one line, since \n was eaten
													stdReturn(INCLUDE);
												}
<INITIAL>"vs"									if(gLexPassthrough) glfxWrite(yytext); else {glfxlval.sType=VERTEX_SHADER; stdReturn(SHADER_TYPE);}
<INITIAL>"tc"									if(gLexPassthrough) glfxWrite(yytext); else {glfxlval.sType=TESSELATION_CONTROL_SHADER; stdReturn(SHADER_TYPE);}
<INITIAL>"te"									if(gLexPassthrough) glfxWrite(yytext); else {glfxlval.sType=TESSELATION_EVALUATION_SHADER; stdReturn(SHADER_TYPE);}
<INITIAL>"gs"									if(gLexPassthrough) glfxWrite(yytext); else {glfxlval.sType=GEOMETRY_SHADER; stdReturn(SHADER_TYPE);}
<INITIAL>"fs"									if(gLexPassthrough) glfxWrite(yytext); else {glfxlval.sType=FRAGMENT_SHADER; stdReturn(SHADER_TYPE);}
<INITIAL>"cs"									if(gLexPassthrough) glfxWrite(yytext); else {glfxlval.sType=COMPUTE_SHADER; stdReturn(SHADER_TYPE);}

<INITIAL>"RasterizerState"						{
													glfxlval.lineno=yylineno;
													renderState=RASTERIZER_STATE;
													glfxPushState(IN_RENDER_STATE);
													stdReturn(RENDER_STATE_DECL);
												}
<INITIAL>"DepthStencilState"					{
													glfxlval.lineno=yylineno;
													renderState=DEPTHSTENCIL_STATE;
													glfxPushState(IN_RENDER_STATE);
													stdReturn(RENDER_STATE_DECL);
												}
<INITIAL>"BlendState"							{
													glfxlval.lineno=yylineno;
													renderState=BLEND_STATE;
													glfxPushState(IN_RENDER_STATE);
													stdReturn(RENDER_STATE_DECL);
												}
<INITIAL>^[ \t]*"SamplerState"					{
													glfxlval.lineno=yylineno;
													renderState=SAMPLER_STATE;
													glfxPushState(IN_RENDER_STATE);
													stdReturn(RENDER_STATE_DECL);
												}
<INITIAL>"SetVertexShader"						{
													if(gLexPassthrough)
														glfxWrite(yytext);
													else
													{
														glfxlval.sType=VERTEX_SHADER; 					
														glfxlval.sCommand=SetVertexShader;
														glfxPushState(IN_SHADER_COMPILE);
														stdReturn(SHADER_COMMAND);
													}
												}
<INITIAL>"SetHullShader"						{
													if(gLexPassthrough)
														glfxWrite(yytext);
													else
													{
														glfxlval.sType=TESSELATION_CONTROL_SHADER;
														glfxlval.sCommand=SetHullShader;
														glfxPushState(IN_SHADER_COMPILE);
														stdReturn(SHADER_COMMAND);
													}
												}
<INITIAL>"SetDomainShader"						{
													if(gLexPassthrough)
														glfxWrite(yytext);
													else
													{
														glfxlval.sType=TESSELATION_EVALUATION_SHADER; 	
														glfxlval.sCommand=SetDomainShader;
														glfxPushState(IN_SHADER_COMPILE);
														stdReturn(SHADER_COMMAND);
													}
												}
<INITIAL>"SetGeometryShader"					{
													if(gLexPassthrough)
														glfxWrite(yytext);
													else
													{
														glfxlval.sType=GEOMETRY_SHADER; 				
														glfxlval.sCommand=SetGeometryShader;
														glfxPushState(IN_SHADER_COMPILE);
														stdReturn(SHADER_COMMAND);
													}
												}
<INITIAL>"SetPixelShader"						{
													if(gLexPassthrough)
														glfxWrite(yytext);
													else
													{
														glfxlval.sType=FRAGMENT_SHADER; 				
														glfxlval.sCommand=SetFragmentShader;
														glfxPushState(IN_SHADER_COMPILE);
														stdReturn(SHADER_COMMAND);
													}
												}
<INITIAL>"SetFragmentShader"					{
													if(gLexPassthrough)
														glfxWrite(yytext);
													else
													{
														glfxlval.sType=FRAGMENT_SHADER; 				
														glfxlval.sCommand=SetFragmentShader;
														glfxPushState(IN_SHADER_COMPILE);
														stdReturn(SHADER_COMMAND);
													}
												}
<INITIAL>"SetComputeShader"						{
													if(gLexPassthrough)
														glfxWrite(yytext);
													else
													{
														glfxlval.sType=COMPUTE_SHADER;	 				
														glfxlval.sCommand=SetComputeShader;
														glfxPushState(IN_SHADER_COMPILE);
														stdReturn(SHADER_COMMAND);
													}
												}
<INITIAL>"SetRasterizerState"					{
													if(gLexPassthrough)
														glfxWrite(yytext);
													else
													{
														glfxlval.sCommand=SetRasterizerState;
														stdReturn(SET_RASTERIZER_COMMAND);
													}
												}
<INITIAL>"SetDepthStencilState"					{
													if(gLexPassthrough)
														glfxWrite(yytext);
													else
													{
														glfxlval.sCommand=SetDepthStencilState;
														stdReturn(SET_DEPTH_COMMAND);
													}
												}
<INITIAL>"SetBlendState"						{
													if(gLexPassthrough)
														glfxWrite(yytext);
													else
													{
														glfxlval.sCommand=SetBlendState;
														stdReturn(SET_BLEND_COMMAND);
													}
												}

<INITIAL>"VertexShader"							{
													glfxlval.lineno=yylineno;
													glfxlval.sType=VERTEX_SHADER;
													glfxPushState(IN_SHADER_COMPILE);
													stdReturn(DECL_SHADER);
												}
<INITIAL>"GeometryShader"							{
													glfxlval.lineno=yylineno;
													glfxlval.sType=GEOMETRY_SHADER;
													glfxPushState(IN_SHADER_COMPILE);
													stdReturn(DECL_SHADER);
												}
<INITIAL>"PixelShader"							{
													glfxlval.lineno=yylineno;
													glfxlval.sType=FRAGMENT_SHADER;
													glfxPushState(IN_SHADER_COMPILE);
													stdReturn(DECL_SHADER);
												}
<INITIAL>"FragmentShader"						{
													glfxlval.lineno=yylineno;
													glfxlval.sType=FRAGMENT_SHADER;
													glfxPushState(IN_SHADER_COMPILE);
													stdReturn(DECL_SHADER);
												}
<IN_SHADER_COMPILE>"vs_"[0-9]"_"[0-9]			{
													glfxlval.sType=VERTEX_SHADER;
													glfxlval.num=atoi(digits(yytext).c_str());
													stdReturn(SHADER_PROFILE);
												}
<IN_SHADER_COMPILE>"ps_"[0-9]"_"[0-9]			{
													glfxlval.sType=FRAGMENT_SHADER;
													glfxlval.num=atoi(digits(yytext).c_str());
													stdReturn(SHADER_PROFILE);
												}
<IN_SHADER_COMPILE>"cs_"[0-9]"_"[0-9]			{
													glfxlval.sType=COMPUTE_SHADER;
													glfxlval.num=atoi(digits(yytext).c_str());
													stdReturn(SHADER_PROFILE);
												}
<IN_SHADER_COMPILE>"gs_"[0-9]"_"[0-9]			{
													glfxlval.sType=GEOMETRY_SHADER;
													glfxlval.num=atoi(digits(yytext).c_str());
													stdReturn(SHADER_PROFILE);
												}
<IN_SHADER_COMPILE>"ds_"[0-9]"_"[0-9]			{
													glfxlval.sType=TESSELATION_EVALUATION_SHADER;//= Domain shader
													glfxlval.num=atoi(digits(yytext).c_str());
													stdReturn(SHADER_PROFILE);
												}
<IN_SHADER_COMPILE>"hs_"[0-9]"_"[0-9]			{
													glfxlval.sType=TESSELATION_CONTROL_SHADER;//= Hull shader
													glfxlval.num=atoi(digits(yytext).c_str());
													stdReturn(SHADER_PROFILE);
												}
<IN_SHADER_COMPILE>"CompileShader"				{
													glfxlval.lineno=yylineno;
													stdReturn(COMPILE_SHADER);
												}
<IN_SHADER_COMPILE>"ConstructGSWithSO"			{
													glfxlval.lineno=yylineno;
													stdReturn(CONSTRUCT_GS_WITH_SO);
												}
<IN_SHADER>"vec2"								{
													glfxlval.lineno=yylineno;
													glfxlval.strs[0]=yytext;
													stdReturn(IDENTIFIER);
												}
<IN_SHADER>"Sample"								{
													glfxlval.lineno=yylineno;
													glfxlval.strs[0]=yytext;
													stdReturn(SAMPLE);
												}
<IN_SHADER>"Load"								{
													stdReturn(LOAD);
												}
<INITIAL,IN_SHADER>"GroupMemoryBarrierWithGroupSync"	{
															modReturn(IDENTIFIER,"memoryBarrierShared");
														}
<INITIAL,IN_SHADER>"groupshared"	{
															modReturn(IDENTIFIER,"shared");
														}
<INITIAL,IN_SHADER>"saturate"					{
													stdReturn(SATURATE);
												}
<INITIAL,IN_SHADER>"inline"|"const"|"static"|"STATIC"	{
												}
<INITIAL,IN_SHADER>"asfloat"					{
													modReturn(IDENTIFIER,"uintBitsToFloat");
												}
<INITIAL,IN_SHADER>"asint"						{
													modReturn(IDENTIFIER,"floatBitsToInt");
												}
<INITIAL,IN_SHADER>"asuint"						{
													modReturn(IDENTIFIER,"floatBitsToUint");
												}
<INITIAL,IN_SHADER>"f32tof16"					{
													modReturn(IDENTIFIER,"floatBitsToUint");
												}
<INITIAL,IN_SHADER>"f16tof32"					{
													modReturn(IDENTIFIER,"uintBitsToFloat");
												}
<INITIAL,IN_SHADER>"lerp"						{
													modReturn(IDENTIFIER,"mix");
												}
<INITIAL,IN_SHADER>"atan2"						{
													modReturn(IDENTIFIER,"atan");
												}
<INITIAL,IN_SHADER>"int2"						{
													modReturn(IDENTIFIER,"ivec2");
												}
<INITIAL,IN_SHADER>"int3"						{
													modReturn(IDENTIFIER,"ivec3");
												}
<INITIAL,IN_SHADER>"int4"						{
													modReturn(IDENTIFIER,"ivec4");
												}
<INITIAL,IN_SHADER>"uint2"						{
													modReturn(IDENTIFIER,"uvec2");
												}
<INITIAL,IN_SHADER>"uint3"						{
													modReturn(IDENTIFIER,"uvec3");
												}
<INITIAL,IN_SHADER>"uvec3"						{
													modReturn(IDENTIFIER,"uvec3");
												}
<INITIAL,IN_SHADER>"uint4"						{
													modReturn(IDENTIFIER,"uvec4");
												}
<INITIAL,IN_SHADER>"frac"						{
													modReturn(IDENTIFIER,"fract");
												}
<IN_SHADER>"GetDimensions"						{
													stdReturn(GET_DIMS);
												}
<IN_SHADER>"SampleLevel"						{
													glfxlval.lineno=yylineno;
													glfxlval.strs[0]=yytext;
													stdReturn(SAMPLE_LOD);
												}
<IN_SHADER>"return"								{
													glfxlval.lineno=yylineno;
													glfxlval.strs[0]=yytext;
													stdReturn(RETURN);
												}
<IN_SHADER>"break"								stdReturn(BREAK);
<IN_SHADER>"continue"							stdReturn(CONTINUE);
<IN_SHADER>"do"									stdReturn(DO);
<IN_SHADER>"for"								stdReturn(FOR);
<IN_SHADER>"goto"								stdReturn(GOTO);
<IN_SHADER>"if"									stdReturn(IF);
<IN_SHADER>"else"								stdReturn(ELSE);
<IN_SHADER>"while"								stdReturn(WHILE);
<IN_SHADER>"uniform"							{
													stdReturn(UNIFORM);
												}
<IN_SHADER>";"[ \t\n]*							{
													glfxlval.strs[0]=yytext;
													stdReturn(';');
												}
<IN_SHADER_COMPILE,IN_RENDER_STATE,IN_SHADER>{FLOAT_BLCK}	{
													glfxlval.lineno=yylineno;
													glfxlval.fnum=(float)atof(yytext);
													stdReturn(P_FLOAT);
												}
<IN_SHADER_COMPILE,IN_RENDER_STATE,IN_SHADER,IN_PRAGMA,IN_STRUCT,IN_LINE>{NUM_BLCK}	{
													glfxlval.lineno=yylineno;
													glfxlval.num=atoi(yytext);
													glfxlval.strs[0]=yytext;
													stdReturn(NUM);
												}
<IN_LINE>\n	{
	accumulateWhitespace(yytext);
	glfxPopState();
}

<IN_RENDER_STATE>(?i:MIN_MAG_MIP_POINT)					{stdReturn(MIN_MAG_MIP_POINT); }
<IN_RENDER_STATE>(?i:MIN_MAG_POINT_MIP_LINEAR)			{stdReturn(MIN_MAG_POINT_MIP_LINEAR); }
<IN_RENDER_STATE>(?i:MIN_POINT_MAG_LINEAR_MIP_POINT)	{stdReturn(MIN_POINT_MAG_LINEAR_MIP_POINT); }
<IN_RENDER_STATE>(?i:MIN_POINT_MAG_MIP_LINEAR)			{stdReturn(MIN_POINT_MAG_MIP_LINEAR);}
<IN_RENDER_STATE>(?i:MIN_LINEAR_MAG_MIP_POINT)			{stdReturn(MIN_LINEAR_MAG_MIP_POINT);}
<IN_RENDER_STATE>(?i:MIN_LINEAR_MAG_POINT_MIP_LINEAR)	{stdReturn(MIN_LINEAR_MAG_POINT_MIP_LINEAR);}
<IN_RENDER_STATE>(?i:MIN_MAG_LINEAR_MIP_POINT)			{stdReturn(MIN_MAG_LINEAR_MIP_POINT);}
<IN_RENDER_STATE>(?i:MIN_MAG_MIP_LINEAR)				{stdReturn(MIN_MAG_MIP_LINEAR);}
<IN_RENDER_STATE>(?i:ANISOTROPIC)						{stdReturn(ANISOTROPIC);}

<IN_RENDER_STATE>(?i:SRC_ALPHA)					{stdReturn(SRC_ALPHA);}
<IN_RENDER_STATE>(?i:INV_SRC_ALPHA)				{stdReturn(INV_SRC_ALPHA);}
<IN_RENDER_STATE>(?i:ZERO)						{stdReturn(ZERO	);}
<IN_RENDER_STATE>(?i:ONE)						{stdReturn(ONE);}
<IN_RENDER_STATE>(?i:SRC_COLOR)					{stdReturn(SRC_COLOR);}
<IN_RENDER_STATE>(?i:INV_SRC_COLOR)				{stdReturn(INV_SRC_COLOR);}
<IN_RENDER_STATE>(?i:DEST_ALPHA)				{stdReturn(DEST_ALPHA);}	
<IN_RENDER_STATE>(?i:INV_DEST_ALPHA)			{stdReturn(INV_DEST_ALPHA);}
<IN_RENDER_STATE>(?i:DEST_COLOR)				{stdReturn(DEST_COLOR);}
<IN_RENDER_STATE>(?i:INV_DEST_COLOR)			{stdReturn(INV_DEST_COLOR);}
<IN_RENDER_STATE>(?i:SRC_ALPHA_SAT)				{stdReturn(SRC_ALPHA_SAT);}
<IN_RENDER_STATE>(?i:BLEND_FACTOR)				{stdReturn(BLEND_FACTOR	);}
<IN_RENDER_STATE>(?i:INV_BLEND_FACTOR)			{stdReturn(INV_BLEND_FACTOR	);}
<IN_RENDER_STATE>(?i:SRC1_COLOR)				{stdReturn(SRC1_COLOR);}
<IN_RENDER_STATE>(?i:INV_SRC1_COLOR)			{stdReturn(INV_SRC1_COLOR);}
<IN_RENDER_STATE>(?i:SRC1_ALPHA)				{stdReturn(SRC1_ALPHA);}
<IN_RENDER_STATE>(?i:INV_SRC1_ALPHA)			{stdReturn(INV_SRC1_ALPHA);}

<IN_RENDER_STATE>(?i:ADD)						{stdReturn(BLEND_OP_ADD		);}
<IN_RENDER_STATE>(?i:SUBTRACT)					{stdReturn(BLEND_OP_SUBTRACT	);}
<IN_RENDER_STATE>(?i:MAX)						{stdReturn(BLEND_OP_MAX		);}

<IN_RENDER_STATE>(?i:FRONT)						{stdReturn(CULL_FRONT_FACES	);}
<IN_RENDER_STATE>(?i:BACK)						{stdReturn(CULL_BACK_FACES	);}

<IN_RENDER_STATE>(?i:NONE)						{stdReturn(RENDERSTATE_RVALUE_NONE);}

<IN_RENDER_STATE>(?i:SOLID)						{stdReturn(FILL_MODE_SOLID); }
<IN_RENDER_STATE>(?i:WIREFRAME)					{stdReturn(FILL_MODE_WIREFRAME); }
   
<IN_RENDER_STATE>(?i:WRAP)						{stdReturn(TEXTURE_WRAP); }
<IN_RENDER_STATE>(?i:MIRROR)					{stdReturn(TEXTURE_MIRROR); }
<IN_RENDER_STATE>(?i:CLAMP)						{stdReturn(TEXTURE_CLAMP); }

<IN_RENDER_STATE>(?i:ALWAYS)					{stdReturn(DEPTH_PASS_ALWAYS);}
<IN_RENDER_STATE>(?i:NEVER)						{stdReturn(DEPTH_PASS_NEVER	);}
<IN_RENDER_STATE>(?i:LESS)						{stdReturn(DEPTH_PASS_LESS	);}
<IN_RENDER_STATE>(?i:GREATER)					{stdReturn(DEPTH_PASS_GREATER		); }
<IN_RENDER_STATE>(?i:LESS_EQUAL)				{stdReturn(DEPTH_PASS_LESS_EQUAL	); }
<IN_RENDER_STATE>(?i:GREATER_EQUAL)				{stdReturn(DEPTH_PASS_GREATER_EQUAL); }

<IN_SHADER_COMPILE,IN_RENDER_STATE,IN_SHADER,IN_STRUCT,IN_TEXTURE_DECL>{ID_BLCK}	{
													glfxlval.lineno=yylineno;
													glfxlval.strs[0]=yytext;
													stdReturn(IDENTIFIER);
												}
<IN_SHADER_COMPILE,IN_RENDER_STATE,IN_SHADER>[ \t\n]*"("[ \t\n]*			{
													glfxlval.strs[0]=yytext;
													stdReturn('(');
												}
<IN_SHADER_COMPILE,IN_RENDER_STATE,IN_SHADER>[ \t\n]*")"[ \t\n]*			{
													glfxlval.strs[0]=yytext;
													stdReturn(')');
												}
<IN_SHADER_COMPILE,IN_RENDER_STATE,IN_SHADER,IN_STRUCT>[ \t\n]*"["[ \t\n]*			{
													glfxlval.strs[0]=yytext;
													stdReturn('[');
												}
<IN_SHADER_COMPILE,IN_RENDER_STATE,IN_SHADER,IN_STRUCT>[ \t\n]*"]"[ \t\n]*			{
													glfxlval.strs[0]=yytext;
													stdReturn(']');
												}
<IN_SHADER_COMPILE,IN_RENDER_STATE,IN_SHADER,INITIAL>[ \t\n]*","[ \t\n]*			{
													glfxlval.strs[0]=yytext;
													stdReturn(',');
												}
<IN_SHADER>"<"									stdReturn('<');
<IN_SHADER>">"									stdReturn('>');
<IN_SHADER>"."									{
													glfxlval.strs[0]=yytext;
													stdReturn('.');
												} 

<IN_SHADER>"*="									stdReturn(TIMES_EQUALS);
<IN_SHADER>"/="									stdReturn(OVER_EQUALS);
<IN_SHADER>"%="									stdReturn(PERCENT_EQUALS);
<IN_SHADER>"+="									stdReturn(PLUS_EQUALS);
<IN_SHADER>"-="									stdReturn(MINUS_EQUALS);
<IN_SHADER>"<<="								stdReturn(LEFT_SHIFT_EQUALS);
<IN_SHADER>">>="								stdReturn(RIGHT_SHIFT_EQUALS);
<IN_SHADER>"&="									stdReturn(AND_EQUALS);
<IN_SHADER>"^="									stdReturn(XOR_EQUALS);
<IN_SHADER>"|="									stdReturn(OR_EQUALS);
<IN_SHADER>"||"									stdReturn(OR);
<IN_SHADER>"&&"									stdReturn(AND);

<IN_SHADER>"<="									stdReturn(LESS_EQ);
<IN_SHADER>">="									stdReturn(GRTR_EQ);

<IN_SHADER>"<<"									stdReturn(LEFT_SHIFT);
<IN_SHADER>">>"									stdReturn(RIGHT_SHIFT);

<IN_SHADER>"++"									stdReturn(PLUS_PLUS);
<IN_SHADER>"--"									stdReturn(MINUS_MINUS);
<IN_SHADER>"=="									stdReturn(EQ_EQ);
<IN_SHADER>"!="									stdReturn(NOT_EQ);

<IN_SHADER>"+"			{
							stdReturn('+');
						}  
<IN_SHADER>"-"			{
							stdReturn('-');
						}   
<IN_SHADER,IN_STRUCT>"*"			{
							stdReturn('*');
						}    
<IN_SHADER>"%"			{
							stdReturn('%');
						}    
<IN_SHADER>"/"			{
							stdReturn('/');
						}
<IN_SHADER>"&"			{
							stdReturn('&');
						}    
<IN_SHADER>"|"			{
							stdReturn('|');
						}
<IN_SHADER_COMPILE,IN_RENDER_STATE,IN_SHADER>[ \t\n]*	{
													accumulateWhitespace(yytext);
												}
<IN_SHADER_COMPILE,IN_RENDER_STATE,IN_SHADER>"="			{
													glfxlval.strs[0]=yytext;
													stdReturn('=');
												}

<IN_SHADER_COMPILE,IN_TEXTURE_DECL>";"			{
													glfxlval.strs[0]=yytext;
													glfxPopState();
													stdReturn(';');
												}
<IN_RENDER_STATE,IN_STRUCT>";"					{
													glfxlval.strs[0]=yytext;
													if(!brace)
														glfxPopState();
													stdReturn(';');
												}
<INITIAL>{STR_BLCK}								{
													
													{
														glfxlval.lineno=yylineno;
														glfxlval.strs[0]=yytext;
														stdReturn(QUOTED_STRING);
													}
												}
<IN_SHADER_COMPILE>{STR_BLCK}					{
													glfxlval.lineno=yylineno;
													glfxlval.strs[0]=yytext;
													stdReturn(QUOTED_STRING);
												}
<INITIAL,IN_SHADER>{HEX_BLCK}								{
													//if(gLexPassthrough)
													//	glfxWrite(yytext);
													//else
													{
														glfxlval.lineno	=yylineno;
														glfxlval.unum	=strtoul(yytext, NULL, 16);
														glfxlval.strs[0]=yytext;
														stdReturn(NUM);
													}
												}
<INITIAL>{NUM_BLCK}								{
													//if(gLexPassthrough)
													//	glfxWrite(yytext);
													//else
													{
														glfxlval.lineno=yylineno;
														glfxlval.num=atoi(yytext);
														glfxlval.strs[0]=yytext;
														stdReturn(NUM);
													}
												}
<INITIAL>{FLOAT_BLCK}							{glfxlval.fnum=(float)atof(yytext); stdReturn(P_FLOAT);}
<INITIAL>"inout"	{
													{
														glfxlval.lineno=yylineno;
														glfxlval.strs[0]=yytext;
														stdReturn(STORAGEQ);
													}
												}
<INITIAL>"in"|"out"|"line"|"lineadj"|"point"	{
													{
														glfxlval.lineno=yylineno;
														glfxlval.strs[0]=yytext;
														stdReturn(STORAGEQ);
													}
												}
<INITIAL>"gl_FragDepth"							{glfxlval.lineno=yylineno; glfxlval.strs[0]=yytext; stdReturn(GL_FRAGDEPTH);}
<INITIAL>"true"									{glfxlval.num=1; stdReturn(NUM);}
<INITIAL>"false"								{glfxlval.num=0; stdReturn(NUM);}
<INITIAL>{ID_BLCK}								{
													glfxlval.lineno=yylineno;
													glfxlval.strs[0]=yytext;
													stdReturn(IDENTIFIER);
												}
<INITIAL>{ID_BLCK}"::"{ID_BLCK}					{
													if(gLexPassthrough)
														glfxWrite(yytext);
													else
													{
														glfxlval.lineno=yylineno;
														glfxlval.strs[0]=yytext;
														stdReturn(IDENTIFIER);
													}
												}
<INITIAL,IN_UNIFORM_DECL,IN_PRAGMA>"("	{
														stdReturn('(');
													}
<INITIAL,IN_UNIFORM_DECL,IN_PRAGMA>")"	{
														stdReturn(')');
													}
<INITIAL>"<"									{
													stdReturn('<');
												}
<INITIAL>">"									{
													stdReturn('>');
												}
<INITIAL>[ \t\n]*"{"[ \t\n]*					{
													if(gLexPassthrough)
														glfxWrite(yytext);
													else
													{
														stdReturn('{');
													}
												}
<INITIAL>[ \t\n]*"}"[ \t\n]*					{
													if(gLexPassthrough)
														glfxWrite(yytext);
													else
													{
														stdReturn('}');
													}//"["[\t ]*"]"						if(gLexPassthrough) glfxWrite(yytext); else {stdReturn(EMPTY_ARRAY_BRACKETS);}
												}
<INITIAL,IN_PRAGMA>","									{
													//if(gLexPassthrough)
													//	glfxWrite(yytext);
													//else
														stdReturn(',');
												}
<INITIAL,IN_UNIFORM_DECL>"="				if(gLexPassthrough) glfxWrite(yytext); else {stdReturn('=');}
<INITIAL,IN_UNIFORM_DECL>";"				if(gLexPassthrough) glfxWrite(yytext); else {stdReturn(';');}
<INITIAL,IN_UNIFORM_DECL>":"				{
												stdReturn(':');
											}
<IN_STRUCT,IN_PRAGMA,IN_RENDER_STATE,IN_SHADER>":"	{
												stdReturn(':');
											}
<IN_STRUCT,IN_PRAGMA,IN_RENDER_STATE,IN_SHADER>"?"	{
												stdReturn('?');
											}
<INITIAL,IN_RENDER_STATE,IN_STRUCT>\/\/[^\n\\]*(\\+[^\\][^\n\\]*)*\n		{
													if(gLexPassthrough)
														glfxWrite(yytext); // Single line comment (with possible continuation)
												}
<IN_SHADER>\/\/[^\n\\]*(\\+[^\\][^\n\\]*)*\n	{
													// Write an empty statement: preserve line numbers
													glfxlval.strs[0] = yytext;
													gSkip();
													
												}
<INITIAL,IN_RENDER_STATE,IN_SHADER>"/*"         {
													glfxPushState(IN_MULTILINE_COMMENT);
													if(gLexPassthrough)
														glfxWrite(yytext); 
												}
<IN_MULTILINE_COMMENT>"*/"						{
													if(gLexPassthrough)
														glfxWrite(yytext); 
													glfxPopState();
												}
<IN_MULTILINE_COMMENT>[^"*"]+					{
													if(gLexPassthrough)
														glfxWrite(yytext);
												}
<IN_MULTILINE_COMMENT>"*"							{
													if(gLexPassthrough)
														glfxWrite(yytext);
												}
<INITIAL>[\t\n ]								{
													if(gLexPassthrough) glfxWrite(yytext);
												}
<IN_RENDER_STATE,IN_STRUCT>[\t\n ]	{
												}// Without this line, the yylineno would get out of whack.
<IN_SHADER>[\t\n ]	{
													stdReturn(WHITESPACE);
												}// Without this line, the yylineno would get out of whack.
<INITIAL>.										if(gLexPassthrough) glfxWrite(yytext); else {errLex(yytext);}
<IN_SHADER,IN_RENDER_STATE,IN_STRUCT>[ \t\n]*"{"[ \t\n]*		{
													glfxlval.strs[0]=yytext;
													stdReturn('{');
												}
<IN_SHADER>[ \t\n]*"}"[ \t\n]*					{
													glfxlval.strs[0]=yytext;
													stdReturn('}');
												}
<IN_RENDER_STATE,IN_STRUCT>[ \t\n]*"}"[ \t\n]*					{
													glfxlval.strs[0]=yytext;
													stdReturn('}');
												}
%%
void glfxPushState(int s)
{
	yy_push_state(s);
}
void glfxPopState()
{
	if(yy_start_stack_ptr<=0)
		glfxerror("Stack underflow");
	else
		yy_pop_state();
}
void glfxPopAllStates()
{
	while(yy_start_stack_ptr>0)
		yy_pop_state();
}
const char *glfxGetStateText()
{
	switch(YYSTATE)
	{
	case IN_SHADER:
		return "shader";
	case IN_DEFINE:
		return "macro definition";
	case IN_UNDEFINE:
		return "macro undefinition";
	case IN_SHADER_COMPILE:
		return "shader compile";
	case IN_RENDER_STATE:
		return "render state def";
	case IN_LINE:
		return "line statement";
	case INITIAL:
		return "initial state";
	default:
		return "unknown state";
	};
	return "";
}
void resetGlfxLex()
{
	glfxdebug=0;
	brace=0;
	glfxset_lineno(1);
	glfxPopAllStates();
	recent.clear();
	accw.clear();
}

void errLex(const char* tok)
{
    ostringstream errMsg;
    
    errMsg<<"0("<<yylineno<<") : error: Unkown token '"<<tok<<'\'';
   // throw errMsg.str();
	glfxerror(errMsg.str().c_str());
}

string glfxreadblock(unsigned char openChar, unsigned char closeChar)
{
    string str;
    int braceBalance=0;
    int c;
    bool done=false;
    do {
        c=yyinput();
        if(c<=0)
		{
            throw "Brace balance error\n";
		}
        str+=(unsigned char)c;
		if((unsigned char)c==openChar)
		{
            braceBalance++;
		}
        else if((unsigned char)c==closeChar)
		{
            braceBalance--;
            if(braceBalance<0)
			{
                throw "Brace balance error\n";
			}
            else if(braceBalance==0)
                done=true;
        }
    } while(!done);
    return str;
}
void yypush(std::string str)
{
	const char *p = str.c_str();
	const char *q = p+strlen(p);
	while (q > p)
	{
		--q;
		unput(*q);
	}
}
int modReturn_(int u, const char *txt)
{
	glfxlval.token = u;
	glfxlval.lineno = yylineno;
	if(write_line_number_next)
	{
		write_line_number_next = false;
		if (YYSTATE != IN_LINE)		// No point in stacking these
		{
			std::string str = txt;
			glfxlval.strs[0] =  "\n#line ";
			ostringstream line_txt;
			line_txt<<" "<<LineNumberFromYYLine(glfxlval.lineno)<<" "<<CurrentFilenumber()<<"\n";
			// put the next token back onto the stack:
			yypush(str);
			yypush(line_txt.str());
			recent += glfxlval.strs[0] + " ";
			glfxPushState(IN_LINE);
			return (LINE);
		}
	}
	if (u == '}')
	{
		brace--;
		if (YY_START == IN_SHADER)
		{
			if(!brace)
				glfxPopState();
		}
	}
	else if (u == '{')
	{
		if (read_shader || read_function)
		{
			glfxPushState(IN_SHADER);
			read_shader = false;
			read_function = false;
		}
		brace++;
	}
	string tot = (accw + txt);
	glfxlval.strs[0] = txt;
	accw.clear();
	recent += tot;
	while (recent.length()>100)
		recent.erase(0, 1);
	return (u);
}
int stdReturn_(int u)
{
	return modReturn_(u, yytext);
}